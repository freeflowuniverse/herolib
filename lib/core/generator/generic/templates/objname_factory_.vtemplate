
module ${args.name}

import freeflowuniverse.herolib.core.base
import freeflowuniverse.herolib.core.playbook
import freeflowuniverse.herolib.ui.console

@if args.cat == .installer
import freeflowuniverse.herolib.sysadmin.startupmanager
import freeflowuniverse.herolib.osal.zinit
import time
@end

__global (
	${args.name}_global map[string]&${args.classname}
	${args.name}_default string
)

/////////FACTORY

^^[params]
pub struct ArgsGet{
pub mut:
    name string
}

@if args.hasconfig
fn args_get (args_ ArgsGet) ArgsGet {
	mut args:=args_
	if args.name == ""{
		args.name = ${args.name}_default
	}
	if args.name == ""{
		args.name = "default"
	}
	return args
}

pub fn get(args_ ArgsGet) !&${args.classname}  {
    mut args := args_get(args_)
	if !(args.name in ${args.name}_global) {
        if args.name=="default"{
            if ! config_exists(args){
                if default{
                    config_save(args)!
                }
            }
    		config_load(args)!
        }
	}
	return ${args.name}_global[args.name] or { 
            println(${args.name}_global)
            panic("could not get config for ${args.name} with name:??{args.name}") 
        }
}


@else
pub fn get(args_ ArgsGet) !&${args.classname}  {
    return &${args.classname}{}
}
@end

@if args.hasconfig
fn config_exists(args_ ArgsGet) bool {
    mut args := args_get(args_)
	mut context:=base.context() or { panic("bug") }
	return context.hero_config_exists("${args.name}",args.name)
}

fn config_load(args_ ArgsGet) ! {
	mut args := args_get(args_)
	mut context:=base.context()!
	mut heroscript := context.hero_config_get("${args.name}",args.name)!
	play(heroscript:heroscript)!
}

fn config_save(args_ ArgsGet) ! {
	mut args := args_get(args_)
	mut context:=base.context()!
	context.hero_config_set("${args.name}",args.name,heroscript_default()!)!
}


fn set(o ${args.classname})! {
	mut o2:=obj_init(o)!
	${args.name}_global[o.name] = &o2
    ${args.name}_default = o.name
}


^^[params]
pub struct PlayArgs {
pub mut:
    heroscript string  //if filled in then plbook will be made out of it
    plbook     ?playbook.PlayBook 
	reset      bool
}

pub fn play(args_ PlayArgs) ! {
	
	mut args:=args_

    @if args.hasconfig
    if args.heroscript == "" {
        args.heroscript = heroscript_default()!
    }
    @end
    mut plbook := args.plbook or {
        playbook.new(text: args.heroscript)!
    }
    
    @if args.hasconfig
    mut install_actions := plbook.find(filter: '${args.name}.configure')!
    if install_actions.len > 0 {
        for install_action in install_actions {
            mut p := install_action.params
            cfg_play(p)!
        }
    }
    @end

    @if args.cat == .installer
    mut other_actions := plbook.find(filter: '${args.name}.')!
    for other_action in other_actions {
        if other_action.name in ["destroy","install","build"]{
            mut p := other_action.params
            reset:=p.get_default_false("reset")
            if other_action.name == "destroy" || reset{
                console.print_debug("install action ${args.name}.destroy")
                destroy()!
            }
            if other_action.name == "install"{
                console.print_debug("install action ${args.name}.install")
                install()!
            }            
        }
        @if args.startupmanager
        if other_action.name in ["start","stop","restart"]{
            mut p := other_action.params
            name := p.get('name')!            
            mut ${args.name}_obj:=get(name:name)!
            console.print_debug("action object:\n??{${args.name}_obj}")
            if other_action.name == "start"{
                console.print_debug("install action ${args.name}.??{other_action.name}")
                ${args.name}_obj.start()!
            }

            if other_action.name == "stop"{
                console.print_debug("install action ${args.name}.??{other_action.name}")
                ${args.name}_obj.stop()!
            }
            if other_action.name == "restart"{
                console.print_debug("install action ${args.name}.??{other_action.name}")
                ${args.name}_obj.restart()!
            }
        }
        @end
    }
    @end

}

@end

@if args.cat == .installer

////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////# LIVE CYCLE MANAGEMENT FOR INSTALLERS ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

fn startupmanager_get(cat zinit.StartupManagerType) !startupmanager.StartupManager {
	// unknown
	// screen
	// zinit
	// tmux
	// systemd
    match cat{
        .zinit{
            console.print_debug("startupmanager: zinit")
            return startupmanager.get(cat:.zinit)!
        }
        .systemd{
            console.print_debug("startupmanager: systemd")
            return startupmanager.get(cat:.systemd)!
        }else{
            console.print_debug("startupmanager: auto")
            return startupmanager.get()!
        }
    }
}

@if args.hasconfig
//load from disk and make sure is properly intialized
pub fn (mut self ${args.classname}) reload() ! {
    switch(self.name)
    self=obj_init(self)!
}
@end

@if args.startupmanager
pub fn (mut self ${args.classname}) start() ! {
    switch(self.name)
    if self.running()!{
        return
    }

	console.print_header('${args.name} start')

    if ! installed()!{
        install()!
    }

	configure()!

    start_pre()!

    for zprocess in startupcmd()!{
        mut sm:=startupmanager_get(zprocess.startuptype)!

        console.print_debug('starting ${args.name} with ??{zprocess.startuptype}...')

        sm.new(zprocess)!

    	sm.start(zprocess.name)!
    }

    start_post()!

	for _ in 0 .. 50 {
		if self.running()! {
			return
		}
		time.sleep(100 * time.millisecond)
	}
	return error('${args.name} did not install properly.')

}

pub fn (mut self ${args.classname}) install_start(args InstallArgs) ! {
    switch(self.name)
    self.install(args)!
    self.start()!
}

pub fn (mut self ${args.classname}) stop() ! {
    switch(self.name)
    stop_pre()!
    for zprocess in startupcmd()!{
        mut sm:=startupmanager_get(zprocess.startuptype)!
    	sm.stop(zprocess.name)!
    }
    stop_post()!
}

pub fn (mut self ${args.classname}) restart() ! {
    switch(self.name)
    self.stop()!
    self.start()!
}

pub fn (mut self ${args.classname}) running() !bool {
    switch(self.name)

    //walk over the generic processes, if not running return
    for zprocess in startupcmd()!{
        mut sm:=startupmanager_get(zprocess.startuptype)!
    	r:=sm.running(zprocess.name)!
        if r==false{
            return false
        }
    }
    return running()!
}
@end

@@[params]
pub struct InstallArgs{
pub mut:
    reset bool
}

pub fn (mut self ${args.classname}) install(args InstallArgs) ! {
    switch(self.name)
    if args.reset || (!installed()!) {
        install()!
    }    
}

@if args.build
pub fn (mut self ${args.classname}) build() ! {
    switch(self.name)
    build()!
}
@end

pub fn (mut self ${args.classname}) destroy() ! {
    switch(self.name)
@if args.startupmanager
    self.stop() or {}
@end
    destroy()!
}

@end


//switch instance to be used for ${args.name}
pub fn switch(name string) {
	${args.name}_default = name
}
