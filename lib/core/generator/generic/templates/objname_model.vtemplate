module ${args.name}
import freeflowuniverse.herolib.data.paramsparser
import freeflowuniverse.herolib.data.encoderhero
import os

pub const version = '0.0.0'
const singleton = ${args.singleton}
const default = ${args.default}

//THIS THE THE SOURCE OF THE INFORMATION OF THIS FILE, HERE WE HAVE THE CONFIG OBJECT CONFIGURED AND MODELLED
@if args.cat == .installer
^^[heap]
pub struct ${args.classname} {
pub mut:
    name string = 'default'
@if args.hasconfig    
	homedir    string
	configpath string
	username   string
	password   string @@[secret]
	title      string
	host       string
	port       int
@end
}

@else

^^[heap]
pub struct ${args.classname} {
pub mut:
    name string = 'default'
	mail_from    string
	mail_password string @@[secret]
	mail_port   int
	mail_server   string
	mail_username     string 
}

@end


//your checking & initialization code if needed
fn obj_init(mycfg_ ${args.classname})!${args.classname}{
    mut mycfg:=mycfg_
    if mycfg.password == '' && mycfg.secret == '' {
        return error('password or secret needs to be filled in for ??{mycfg.name}')
    }    
    return mycfg
}

@if args.cat == .installer
//called before start if done
fn configure() ! {
    @if args.cat == .installer
	//mut installer := get()!
    @else
    //mut client := get()!
    @end 
@if args.templates
	// mut mycode := ??tmpl('templates/atemplate.yaml')
	// mut path := pathlib.get_file(path: cfg.configpath, create: true)!
	// path.write(mycode)!
	// console.print_debug(mycode)
@end
}
@end


/////////////NORMALLY NO NEED TO TOUCH

pub fn heroscript_loads(heroscript string) !${args.classname} {
    mut obj := encoderhero.decode[${args.classname}](heroscript)!
    return obj
}
