module ${args.name}

@if args.hasconfig
import freeflowuniverse.herolib.core.base
@end
import freeflowuniverse.herolib.core.playbook { PlayBook }
import freeflowuniverse.herolib.ui.console
import json

@if args.cat == .installer
import freeflowuniverse.herolib.osal.startupmanager
@if args.startupmanager
import time
@end
@end

@if ! args.singleton
__global (
	${args.name}_global map[string]&${args.classname}
	${args.name}_default string
)
@end

/////////FACTORY

@if args.hasconfig
@@[params]
pub struct ArgsGet {
pub mut:
	name  string = "default"
	fromdb bool //will load from filesystem
	create bool //default will not create if not exist
}
@else
@@[params]
pub struct ArgsGet {
pub mut:
	name  string = "default"
}
@end

@if args.hasconfig
pub fn new(args ArgsGet) !&${args.classname} {
	mut obj := ${args.classname}{
			name: args.name
		}
	set(obj)!
	return &obj
}

pub fn get(args ArgsGet) !&${args.classname} {
	mut context := base.context()!
	${args.name}_default = args.name
	if args.fromdb || args.name !in ${args.name}_global {
		mut r := context.redis()!
		if r.hexists('context:${args.name}', args.name)! {
			data := r.hget('context:${args.name}', args.name)!
			if data.len == 0 {
				return error('${args.classname} with name: ${args.name} does not exist, prob bug.')
			}
			mut obj := json.decode(${args.classname},data)!
			set_in_mem(obj)!
		}else{
			if args.create {
				new(args)!
			}else{
				return error("${args.classname} with name '${args.name}' does not exist")
			}
		}
		return get(name: args.name)! //no longer from db nor create
	}
	return ${args.name}_global[args.name] or {
		return error('could not get config for ${args.name} with name:${args.name}')
	}
}

// register the config for the future
pub fn set(o ${args.classname}) ! {
	set_in_mem(o)!
	${args.name}_default = o.name
	mut context := base.context()!
	mut r := context.redis()!
	r.hset('context:${args.name}', o.name, json.encode(o))!
}

// does the config exists?
pub fn exists(args ArgsGet) !bool {
	mut context := base.context()!
	mut r := context.redis()!
	return r.hexists('context:${args.name}', args.name)!
}

pub fn delete(args ArgsGet) ! {
	mut context := base.context()!
	mut r := context.redis()!
	r.hdel('context:${args.name}', args.name)!
}

@@[params]
pub struct ArgsList {
pub mut:
	fromdb bool //will load from filesystem
}

// if fromdb set: load from filesystem, and not from mem, will also reset what is in mem
pub fn list(args ArgsList) ![]&${args.classname} {
	mut res := []&${args.classname}{}
	mut context := base.context()!
	if args.fromdb {
		// reset what is in mem
		${args.name}_global = map[string]&${args.classname}{}
		${args.name}_default = ''
	}
	if args.fromdb {
		mut r := context.redis()!
		mut l := r.hkeys('context:${args.name}')!

		for name in l{
			res << get(name:name,fromdb:true)!
		}
		return res
	} else {
		// load from memory
		for _, client in ${args.name}_global {
			res << client
		}
	}
	return res
}


// only sets in mem, does not set as config
fn set_in_mem(o ${args.classname}) ! {
	mut o2 := obj_init(o)!
	${args.name}_global[o.name] = &o2
	${args.name}_default = o.name
}


@else
pub fn new(args ArgsGet) !&${args.classname} {
	return &${args.classname}{}
}
pub fn get(args ArgsGet) !&${args.classname} {
	return new(args)!
}
@end


pub fn play(mut plbook PlayBook) ! {
    if ! plbook.exists(filter: '${args.name}.'){
        return
    }
	mut install_actions := plbook.find(filter: '${args.name}.configure')!
	if install_actions.len > 0 {
        @if args.hasconfig
		for install_action in install_actions {
			heroscript := install_action.heroscript()
			mut obj2 := heroscript_loads(heroscript)!
			set(obj2)!
		}           
        @else
        return error("can't configure ${args.name}, because no configuration allowed for this installer.")
        @end
	}
    @if args.cat == .installer
    mut other_actions := plbook.find(filter: '${args.name}.')!
    for other_action in other_actions {
        if other_action.name in ["destroy","install","build"]{
            mut p := other_action.params
            reset:=p.get_default_false("reset")
            if other_action.name == "destroy" || reset{
                console.print_debug("install action ${args.name}.destroy")
                destroy()!
            }
            if other_action.name == "install"{
                console.print_debug("install action ${args.name}.install")
                install()!
            }            
        }
        @if args.startupmanager
        if other_action.name in ["start","stop","restart"]{
            mut p := other_action.params
            name := p.get('name')!            
            mut ${args.name}_obj:=get(name:name)!
            console.print_debug("action object:\n??{${args.name}_obj}")
            if other_action.name == "start"{
                console.print_debug("install action ${args.name}.??{other_action.name}")
                ${args.name}_obj.start()!
            }

            if other_action.name == "stop"{
                console.print_debug("install action ${args.name}.??{other_action.name}")
                ${args.name}_obj.stop()!
            }
            if other_action.name == "restart"{
                console.print_debug("install action ${args.name}.??{other_action.name}")
                ${args.name}_obj.restart()!
            }
        }
        @end
    }
    @end    
}


@if args.cat == .installer

////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////# LIVE CYCLE MANAGEMENT FOR INSTALLERS ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

@if args.startupmanager
fn startupmanager_get(cat startupmanager.StartupManagerType) !startupmanager.StartupManager {
	// unknown
	// screen
	// zinit
	// tmux
	// systemd  
    match cat{
        .screen {
            console.print_debug("startupmanager: zinit")
            return startupmanager.get(.screen)!
        }
        .zinit{
            console.print_debug("startupmanager: zinit")
            return startupmanager.get(.zinit)!
        }
        .systemd{
            console.print_debug("startupmanager: systemd")
            return startupmanager.get(.systemd)!
        }else{
            console.print_debug("startupmanager: auto")
            return startupmanager.get(.auto)!
        }
    }
}
@end

@if args.hasconfig
//load from disk and make sure is properly intialized
pub fn (mut self ${args.classname}) reload() ! {
    @if ! args.singleton
    switch(self.name)
    @end
    self=obj_init(self)!
}
@end

@if args.startupmanager
pub fn (mut self ${args.classname}) start() ! {
    @if ! args.singleton
    switch(self.name)
    @end
    if self.running()!{
        return
    }

	console.print_header('${args.name} start')

    if ! installed()!{
        install()!
    }

	configure()!

    start_pre()!

    for zprocess in startupcmd()!{
        mut sm:=startupmanager_get(zprocess.startuptype)!

        console.print_debug('starting ${args.name} with ??{zprocess.startuptype}...')

        sm.new(zprocess)!

    	sm.start(zprocess.name)!
    }

    start_post()!

	for _ in 0 .. 50 {
		if self.running()! {
			return
		}
		time.sleep(100 * time.millisecond)
	}
	return error('${args.name} did not install properly.')

}

pub fn (mut self ${args.classname}) install_start(args InstallArgs) ! {
    switch(self.name)
    self.install(args)!
    self.start()!
}

pub fn (mut self ${args.classname}) stop() ! {
    switch(self.name)
    stop_pre()!
    for zprocess in startupcmd()!{
        mut sm:=startupmanager_get(zprocess.startuptype)!
    	sm.stop(zprocess.name)!
    }
    stop_post()!
}

pub fn (mut self ${args.classname}) restart() ! {
    switch(self.name)
    self.stop()!
    self.start()!
}

pub fn (mut self ${args.classname}) running() !bool {
    switch(self.name)

    //walk over the generic processes, if not running return
    for zprocess in startupcmd()!{
        if zprocess.startuptype != .screen{
            mut sm:=startupmanager_get(zprocess.startuptype)!
    	    r:=sm.running(zprocess.name)!
            if r==false{
                return false
            }
        }
    }
    return running()!
}
@end

@@[params]
pub struct InstallArgs{
pub mut:
    reset bool
}

pub fn (mut self ${args.classname}) install(args InstallArgs) ! {
    switch(self.name)
    if args.reset || (!installed()!) {
        install()!
    }    
}

@if args.build
pub fn (mut self ${args.classname}) build() ! {
    switch(self.name)
    build()!
}
@end

pub fn (mut self ${args.classname}) destroy() ! {
    switch(self.name)
@if args.startupmanager
    self.stop() or {}
@end
    destroy()!
}

@end


// switch instance to be used for ${args.name}
pub fn switch(name string) {
@if ! args.singleton
	${args.name}_default = name
@end
}
