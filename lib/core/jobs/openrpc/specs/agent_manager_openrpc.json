{
  "openrpc": "1.2.6",
  "info": {
    "title": "AgentManager Service",
    "version": "1.0.0",
    "description": "OpenRPC specification for the AgentManager module and its methods."
  },
  "methods": [
    {
      "name": "new",
      "summary": "Create a new Agent instance",
      "description": "Returns a new Agent with default or empty fields set. Caller can then fill in details.",
      "params": [],
      "result": {
        "name": "Agent",
        "description": "A freshly created Agent object.",
        "schema": {
          "$ref": "#/components/schemas/Agent"
        }
      }
    },
    {
      "name": "set",
      "summary": "Add or update an Agent in the system",
      "description": "Stores an Agent in Redis by pubkey. Overwrites any previous entry with the same pubkey.",
      "params": [
        {
          "name": "agent",
          "description": "The Agent instance to be added or updated.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Agent"
          }
        }
      ],
      "result": {
        "name": "success",
        "description": "Indicates success. No data returned on success.",
        "schema": {
          "type": "boolean"
        }
      }
    },
    {
      "name": "get",
      "summary": "Retrieve an Agent by its public key",
      "description": "Looks up a single Agent using its pubkey.",
      "params": [
        {
          "name": "pubkey",
          "description": "The public key to look up.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "Agent",
        "description": "The Agent that was requested, if found.",
        "schema": {
          "$ref": "#/components/schemas/Agent"
        }
      }
    },
    {
      "name": "list",
      "summary": "List all Agents",
      "description": "Returns an array of all known Agents.",
      "params": [],
      "result": {
        "name": "Agents",
        "description": "A list of all Agents in the system.",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Agent"
          }
        }
      }
    },
    {
      "name": "delete",
      "summary": "Delete an Agent by its public key",
      "description": "Removes an Agent from the system by pubkey.",
      "params": [
        {
          "name": "pubkey",
          "description": "The public key of the Agent to be deleted.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "success",
        "description": "Indicates success. No data returned on success.",
        "schema": {
          "type": "boolean"
        }
      }
    },
    {
      "name": "update_status",
      "summary": "Update the status of an Agent",
      "description": "Updates only the status field of the specified Agent.",
      "params": [
        {
          "name": "pubkey",
          "description": "Public key of the Agent to update.",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "status",
          "description": "The new status to set for the Agent.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/AgentState"
          }
        }
      ],
      "result": {
        "name": "success",
        "description": "Indicates success. No data returned on success.",
        "schema": {
          "type": "boolean"
        }
      }
    },
    {
      "name": "get_by_service",
      "summary": "Retrieve all Agents that provide a specific service action",
      "description": "Filters Agents by matching actor and action in any of their declared services.",
      "params": [
        {
          "name": "actor",
          "description": "The actor name to match.",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "action",
          "description": "The action name to match.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "Agents",
        "description": "A list of Agents that match the specified service actor and action.",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Agent"
          }
        }
      }
    }
  ],
  "components": {
    "schemas": {
      "Agent": {
        "type": "object",
        "properties": {
          "pubkey": {
            "type": "string",
            "description": "Public key (ed25519) of the Agent."
          },
          "address": {
            "type": "string",
            "description": "Network address or domain where the Agent can be reached."
          },
          "port": {
            "type": "integer",
            "description": "Network port for the Agent (default: 9999)."
          },
          "description": {
            "type": "string",
            "description": "Optional human-readable description of the Agent."
          },
          "status": {
            "$ref": "#/components/schemas/AgentStatus"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentService"
            },
            "description": "List of public services provided by the Agent."
          },
          "signature": {
            "type": "string",
            "description": "Signature (by the Agent's private key) of address+port+description+status."
          }
        },
        "required": ["pubkey", "status", "services"]
      },
      "AgentStatus": {
        "type": "object",
        "properties": {
          "guid": {
            "type": "string",
            "description": "Unique ID for the job or session."
          },
          "timestamp_first": {
            "$ref": "#/components/schemas/OurTime",
            "description": "Timestamp when this Agent first came online."
          },
          "timestamp_last": {
            "$ref": "#/components/schemas/OurTime",
            "description": "Timestamp of the last heartbeat or update from the Agent."
          },
          "status": {
            "$ref": "#/components/schemas/AgentState"
          }
        }
      },
      "AgentService": {
        "type": "object",
        "properties": {
          "actor": {
            "type": "string",
            "description": "The actor name providing the service."
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentServiceAction"
            },
            "description": "List of actions available for this service."
          },
          "description": {
            "type": "string",
            "description": "Optional human-readable description for the service."
          },
          "status": {
            "$ref": "#/components/schemas/AgentServiceState"
          }
        },
        "required": ["actor", "actions", "status"]
      },
      "AgentServiceAction": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Action name."
          },
          "description": {
            "type": "string",
            "description": "Optional description of this action."
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Dictionary of parameter names to parameter descriptions."
          },
          "params_example": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Example values for the parameters."
          },
          "status": {
            "$ref": "#/components/schemas/AgentServiceState"
          },
          "public": {
            "type": "boolean",
            "description": "Indicates if the action is publicly accessible to all or restricted."
          }
        },
        "required": ["action", "status", "public"]
      },
      "AgentState": {
        "type": "string",
        "enum": ["ok", "down", "error", "halted"],
        "description": "Possible states of an Agent."
      },
      "AgentServiceState": {
        "type": "string",
        "enum": ["ok", "down", "error", "halted"],
        "description": "Possible states of an Agent service or action."
      },
      "OurTime": {
        "type": "string",
        "format": "date-time",
        "description": "Represents a date/time or timestamp value."
      }
    }
  }
}
