{
    "openrpc": "1.2.6",
    "info": {
      "title": "ServiceManager API",
      "version": "1.0.0",
      "description": "OpenRPC 2.0 spec for managing services with ServiceManager."
    },
    "servers": [
      {
        "name": "Local",
        "url": "http://localhost:8080"
      }
    ],
    "methods": [
      {
        "name": "ServiceManager_new",
        "summary": "Create a new Service instance (not saved to Redis yet).",
        "description": "Creates and returns a new empty Service object with default values. The `actor` field remains empty until the caller sets it.",
        "params": [],
        "result": {
          "name": "service",
          "$ref": "#/components/schemas/Service"
        }
      },
      {
        "name": "ServiceManager_set",
        "summary": "Add or update a Service in Redis.",
        "description": "Stores the Service in Redis, identified by its `actor` property.",
        "params": [
          {
            "name": "service",
            "schema": {
              "$ref": "#/components/schemas/Service"
            }
          }
        ],
        "result": {
          "name": "success",
          "schema": {
            "type": "boolean",
            "description": "True if operation succeeds."
          }
        }
      },
      {
        "name": "ServiceManager_get",
        "summary": "Retrieve a Service by actor name.",
        "description": "Gets the Service object from Redis using the given actor name.",
        "params": [
          {
            "name": "actor",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "service",
          "$ref": "#/components/schemas/Service"
        }
      },
      {
        "name": "ServiceManager_list",
        "summary": "List all Services.",
        "description": "Returns an array of all Services stored in Redis.",
        "params": [],
        "result": {
          "name": "services",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          }
        }
      },
      {
        "name": "ServiceManager_delete",
        "summary": "Delete a Service by actor name.",
        "description": "Removes the Service from Redis using the given actor name.",
        "params": [
          {
            "name": "actor",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "success",
          "schema": {
            "type": "boolean"
          }
        }
      },
      {
        "name": "ServiceManager_update_status",
        "summary": "Update the status of a given Service.",
        "description": "Updates only the `status` field of a Service specified by its actor name.",
        "params": [
          {
            "name": "actor",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/ServiceState"
            }
          }
        ],
        "result": {
          "name": "success",
          "schema": {
            "type": "boolean"
          }
        }
      },
      {
        "name": "ServiceManager_get_by_action",
        "summary": "Retrieve Services by action name.",
        "description": "Returns all Services that provide the specified action.",
        "params": [
          {
            "name": "action",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "services",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          }
        }
      },
      {
        "name": "ServiceManager_check_access",
        "summary": "Check if a user has access to a Service action.",
        "description": "Verifies if a user (and any groups they belong to) has the right to invoke a specified action on a given Service.",
        "params": [
          {
            "name": "actor",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_pubkey",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "result": {
          "name": "hasAccess",
          "schema": {
            "type": "boolean"
          }
        }
      }
    ],
    "components": {
      "schemas": {
        "Service": {
          "type": "object",
          "properties": {
            "actor": {
              "type": "string",
              "description": "The actor (unique name) providing the service."
            },
            "actions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ServiceAction"
              },
              "description": "A list of actions available in this service."
            },
            "description": {
              "type": "string",
              "description": "Optional description of the service."
            },
            "status": {
              "$ref": "#/components/schemas/ServiceState",
              "description": "The current state of the service."
            },
            "acl": {
              "$ref": "#/components/schemas/ACL",
              "description": "An optional access control list for the entire service."
            }
          },
          "required": ["actor", "actions", "status"]
        },
        "ServiceAction": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "description": "A unique identifier for the action."
            },
            "description": {
              "type": "string",
              "description": "Optional description of this action."
            },
            "params": {
              "type": "object",
              "description": "Parameter definitions for this action.",
              "additionalProperties": {
                "type": "string"
              }
            },
            "params_example": {
              "type": "object",
              "description": "Example parameters for this action.",
              "additionalProperties": {
                "type": "string"
              }
            },
            "acl": {
              "$ref": "#/components/schemas/ACL",
              "description": "Optional ACL specifically for this action."
            }
          },
          "required": ["action"]
        },
        "ACL": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "A friendly name for the ACL."
            },
            "ace": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ACE"
              },
              "description": "A list of Access Control Entries."
            }
          },
          "required": ["ace"]
        },
        "ACE": {
          "type": "object",
          "properties": {
            "groups": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of group IDs that have this permission."
            },
            "users": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of user public keys that have this permission."
            },
            "right": {
              "type": "string",
              "description": "Permission type (e.g. 'read', 'write', 'admin', 'block')."
            }
          },
          "required": ["right"]
        },
        "ServiceState": {
          "type": "string",
          "enum": [
            "ok",
            "down",
            "error",
            "halted"
          ],
          "description": "Possible states of a service."
        }
      }
    }
  }
  